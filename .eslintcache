[{"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/index.js":"1","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/root/App.js":"2","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/index.store.js":"3","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/reducer/index.reducer.js":"4","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/saga/index.saga.js":"5","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/saga/watcher.saga.js":"6","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/action.type.js":"7","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/routers/index.router.js":"8","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/signup.js":"9","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/validation.js":"10","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/form.js":"11"},{"size":665,"mtime":1611901195051,"results":"12","hashOfConfig":"13"},{"size":205,"mtime":1611902254677,"results":"14","hashOfConfig":"13"},{"size":680,"mtime":1611901261114,"results":"15","hashOfConfig":"13"},{"size":1463,"mtime":1611901078435,"results":"16","hashOfConfig":"13"},{"size":168,"mtime":1611901163071,"results":"17","hashOfConfig":"13"},{"size":139,"mtime":1611901290256,"results":"18","hashOfConfig":"13"},{"size":267,"mtime":1611899692498,"results":"19","hashOfConfig":"13"},{"size":294,"mtime":1611901884073,"results":"20","hashOfConfig":"13"},{"size":3122,"mtime":1611902480303,"results":"21","hashOfConfig":"13"},{"size":0,"mtime":1611901653809,"results":"22","hashOfConfig":"13"},{"size":18649,"mtime":1611902233481,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1tv3o61",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/index.js",[],["49","50"],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/root/App.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/index.store.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/reducer/index.reducer.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/saga/index.saga.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/saga/watcher.saga.js",["51","52"],"import { takeLatest } from \"redux-saga/effects\";\nimport * as types from \"../action.type\";\n\nfunction* watcher() {}\n\nexport default watcher;\n","/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/store/action.type.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/routers/index.router.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/signup.js",["53","54","55","56","57","58","59","60","61"],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/validation.js",[],"/Users/nidhibhatia/dev/RegistrationForms/packages/client/src/component/signup/form.js",["62"],"import React, { useState } from \"react\";\nimport {\n  Grid,\n  Typography,\n  makeStyles,\n  TextField,\n  Button,\n  IconButton,\n  Box,\n} from \"@material-ui/core\";\n\nconst useStyle = makeStyles((theme) => ({\n  textField: {\n    \"& label.Mui-focused\": {\n      fontSize: theme.typography.body1.fontSize,\n      color: \"#8B9092\",\n      fontWeight: theme.typography.fontWeightBold,\n    },\n\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"#8B9092\",\n      },\n\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"#8B9092\",\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"#8B9092\",\n      },\n    },\n  },\n  helperText: {\n    marginLeft: 0,\n    width: \"auto\",\n  },\n  helperTextResume: {\n    marginLeft: 0,\n    width: \"auto\",\n    [theme.breakpoints.down(\"xs\")]: {\n      width: 100,\n    },\n  },\n  input: {\n    // color: theme.palette.primary.main,\n    color: \"#454D50\",\n    fontFamily: \"Nunito Sans\",\n    fontSize: theme.typography.body1.fontSize,\n    // background: \"#fff\",\n    \"&::placeholder\": {\n      color: \"#454D50\",\n    },\n    webkitAutofill: \"#fff\",\n    background: \"transparent\",\n  },\n  labelstyle: {\n    fontFamily: \"Nunito Sans\",\n    fontSize: 12,\n    color: \"#454D50\",\n  },\n\n  Profiles: {\n    paddingRight: 16,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingBottom: 32,\n      paddingRight: 0,\n    },\n  },\n  PaddingRightAndBottomOnly: {\n    paddingRight: 10,\n    paddingBottom: 32,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingRight: 0,\n    },\n  },\n  PaddingRightAndBottomOnlyExperience: {\n    paddingRight: 10,\n    paddingBottom: 32,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingRight: 10,\n    },\n  },\n  paddingLeftandBottomOnly: {\n    paddingLeft: 10,\n    paddingBottom: 32,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingLeft: 0,\n    },\n  },\n  RightLeftBottom: {\n    paddingLeft: 10,\n    paddingBottom: 32,\n    paddingRight: 10,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingRight: 0,\n      paddingLeft: 0,\n    },\n  },\n  RightLeftBottomQulaification: {\n    paddingLeft: 10,\n    paddingBottom: 32,\n    paddingRight: 10,\n    [theme.breakpoints.down(\"sm\")]: {\n      paddingRight: 10,\n      paddingLeft: 0,\n    },\n  },\n  submitButton: {\n    backgroundColor: theme.palette.secondary.light,\n    textTransform: \"none\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.secondary.light,\n    },\n  },\n  submitText: {\n    fontSize: theme.typography.body1.fontSize,\n    color: theme.palette.secondary.dark,\n    fontWeight: theme.typography.fontWeightBold,\n    fontFamily: \"Nunito Sans\",\n    width: \"max-content\",\n  },\n  fileSize: {\n    fontSize: theme.typography.body2.fontSize,\n    color: theme.palette.primary.main,\n    fontWeight: theme.typography.fontWeightBold,\n    fontFamily: \"Nunito Sans\",\n    width: \"max-content\",\n    position: \"absolute\",\n    top: 0,\n    [theme.breakpoints.down(\"sm\")]: {\n      position: \"relative\",\n      top: 0,\n    },\n  },\n  AttachmentIcon: {\n    color: theme.palette.secondary.dark,\n  },\n}));\nconst Form = (props) => {\n  const classes = useStyle();\n  const [size, setsize] = useState();\n  // initial state\n  let {\n    values: {\n      fullName,\n      Email,\n      phoneNumber,\n      Resume,\n      Qualification,\n      Grade,\n      NoticePeriod,\n      Profiles,\n      CurrentCTC,\n      Experience,\n      ExpectedCTC,\n    },\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n    ResumeFile,\n    setFieldValue,\n  } = props;\n\n  // resume file handle\n  const uploadResume = (e) => {\n    e.persist();\n    var file = e.target.files[0];\n    console.log(\"file\", file);\n    if (e.target.files[0] === null) {\n      return null;\n    } else if (file) {\n      console.log(\"file.name\", file.name);\n      ResumeFile(file);\n      setFieldValue(\"Resume\", file.name);\n    }\n\n    if (file.size > 1048576) {\n      setsize(true);\n    } else {\n      setsize(false);\n    }\n  };\n  const [hover, sethover] = useState(false);\n  // button hover animation\n  const handleMouse = () => {\n    sethover(true);\n  };\n  const hoverEventLeave = () => {\n    sethover(false);\n  };\n  return (\n    <Grid container>\n      <form onSubmit={handleSubmit}>\n        <Grid md={12} xs={12} sm={12} container item>\n          <Grid md={1} item />\n          <Grid md={10} xs={12} sm={12} item container>\n            <Grid md={12} xs={12} sm={12} item container>\n              <Grid\n                md={6}\n                xs={12}\n                sm={12}\n                item\n                container\n                className={classes.PaddingRightAndBottomOnly}\n              >\n                <TextField\n                  name=\"fullName\"\n                  label=\"Full Name\"\n                  variant=\"outlined\"\n                  helperText={touched.fullName ? errors.fullName : \"\"}\n                  error={touched.fullName && Boolean(errors.fullName)}\n                  value={fullName}\n                  onChange={handleChange}\n                  className={classes.textField}\n                  fullWidth\n                  InputProps={{\n                    className: classes.input,\n                  }}\n                  InputLabelProps={{\n                    className: classes.labelstyle,\n                  }}\n                  FormHelperTextProps={{\n                    className: classes.helperText,\n                  }}\n                />\n              </Grid>\n              <Grid\n                md={6}\n                xs={12}\n                sm={12}\n                item\n                container\n                className={classes.paddingLeftandBottomOnly}\n              >\n                <TextField\n                  name=\"Email\"\n                  variant=\"outlined\"\n                  label=\"Email\"\n                  className={classes.textField}\n                  helperText={touched.Email ? errors.Email : \"\"}\n                  error={touched.Email && Boolean(errors.Email)}\n                  value={Email}\n                  onChange={handleChange}\n                  fullWidth\n                  InputProps={{\n                    className: classes.input,\n                  }}\n                  InputLabelProps={{\n                    className: classes.labelstyle,\n                  }}\n                  FormHelperTextProps={{\n                    className: classes.helperText,\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid md={12} xs={12} sm={12} item container>\n              <Grid\n                md={6}\n                xs={12}\n                sm={12}\n                item\n                container\n                className={classes.PaddingRightAndBottomOnly}\n              >\n                <TextField\n                  name=\"phoneNumber\"\n                  label=\"Phone Number\"\n                  variant=\"outlined\"\n                  helperText={touched.phoneNumber ? errors.phoneNumber : \"\"}\n                  error={touched.phoneNumber && Boolean(errors.phoneNumber)}\n                  value={phoneNumber}\n                  className={classes.textField}\n                  onChange={handleChange}\n                  fullWidth\n                  InputProps={{\n                    className: classes.input,\n                  }}\n                  InputLabelProps={{\n                    className: classes.labelstyle,\n                  }}\n                  FormHelperTextProps={{\n                    className: classes.helperText,\n                  }}\n                />\n              </Grid>\n              <Grid md={6} xs={12} sm={12} item container>\n                <Grid\n                  md={7}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.RightLeftBottomQulaification}\n                >\n                  <TextField\n                    name=\"Qualification\"\n                    variant=\"outlined\"\n                    label=\"Qualification\"\n                    className={classes.textField}\n                    helperText={\n                      touched.Qualification ? errors.Qualification : \"\"\n                    }\n                    error={\n                      touched.Qualification && Boolean(errors.Qualification)\n                    }\n                    value={Qualification}\n                    onChange={handleChange}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n                <Grid\n                  md={5}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.paddingLeftandBottomOnly}\n                >\n                  <TextField\n                    name=\"Grade\"\n                    variant=\"outlined\"\n                    label=\"Grade\"\n                    className={classes.textField}\n                    helperText={touched.Grade ? errors.Grade : \"\"}\n                    error={touched.Grade && Boolean(errors.Grade)}\n                    value={Grade}\n                    onChange={handleChange}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid md={12} xs={12} sm={12} item container>\n              <Grid\n                md={6}\n                xs={12}\n                sm={12}\n                item\n                container\n                className={classes.PaddingRightAndBottomOnly}\n              >\n                <TextField\n                  name=\"Profiles\"\n                  label=\"Profiles worked in\"\n                  variant=\"outlined\"\n                  helperText={touched.Profiles ? errors.Profiles : \"\"}\n                  error={touched.Profiles && Boolean(errors.Profiles)}\n                  value={Profiles}\n                  onChange={handleChange}\n                  className={classes.textField}\n                  fullWidth\n                  InputProps={{\n                    className: classes.input,\n                  }}\n                  InputLabelProps={{\n                    className: classes.labelstyle,\n                  }}\n                  FormHelperTextProps={{\n                    className: classes.helperText,\n                  }}\n                />\n              </Grid>\n              <Grid\n                md={6}\n                xs={12}\n                sm={12}\n                item\n                container\n                className={classes.paddingLeftandBottomOnly}\n              >\n                <Grid md={12} xs={12} sm={12} item container>\n                  <label>\n                    <input\n                      style={{ display: \"none\" }}\n                      id=\"file\"\n                      name=\"file\"\n                      type=\"file\"\n                      maxLength=\"0\"\n                      onChange={(e) => uploadResume(e)}\n                      readOnly={true}\n                    />\n                  </label>\n                  <TextField\n                    variant=\"outlined\"\n                    fullWidth\n                    label=\"Resume\"\n                    value={Resume}\n                    className={classes.textField}\n                    helperText={touched.Resume ? errors.Resume : \"\"}\n                    error={touched.Resume && Boolean(errors.Resume)}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperTextResume,\n                    }}\n                    style={{ height: 59 }}\n                  />\n                  <Grid xs={12} sm={12} container item justify=\"flex-end\">\n                    {!size ? (\n                      <Typography\n                        className={classes.fileSize}\n                        style={{\n                          position: \"relative\",\n                        }}\n                      >\n                        File size should not exceed 1 MB\n                      </Typography>\n                    ) : (\n                      <Typography\n                        className={classes.fileSize}\n                        style={{ color: \"#CF0C2C\" }}\n                      >\n                        File size should not exceed 1 MB\n                      </Typography>\n                    )}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n\n            <Grid md={12} xs={12} sm={12} item container>\n              <Grid md={6} xs={12} sm={12} item container>\n                <Grid\n                  md={8}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.PaddingRightAndBottomOnlyExperience}\n                >\n                  <TextField\n                    name=\"Experience\"\n                    label=\"Total Experience\"\n                    variant=\"outlined\"\n                    helperText={touched.Experience ? errors.Experience : \"\"}\n                    error={touched.Experience && Boolean(errors.Experience)}\n                    value={Experience}\n                    onChange={handleChange}\n                    className={classes.textField}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n                <Grid\n                  md={4}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.RightLeftBottom}\n                >\n                  <TextField\n                    name=\"CurrentCTC\"\n                    label=\"Current CTC\"\n                    variant=\"outlined\"\n                    helperText={touched.CurrentCTC ? errors.CurrentCTC : \"\"}\n                    error={touched.CurrentCTC && Boolean(errors.CurrentCTC)}\n                    value={CurrentCTC}\n                    onChange={handleChange}\n                    className={classes.textField}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n              <Grid md={6} xs={12} sm={12} item container>\n                <Grid\n                  md={5}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.RightLeftBottomQulaification}\n                >\n                  <TextField\n                    name=\"ExpectedCTC\"\n                    label=\"Expected CTC\"\n                    variant=\"outlined\"\n                    helperText={touched.ExpectedCTC ? errors.ExpectedCTC : \"\"}\n                    error={touched.ExpectedCTC && Boolean(errors.ExpectedCTC)}\n                    value={ExpectedCTC}\n                    onChange={handleChange}\n                    className={classes.textField}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n                <Grid\n                  md={7}\n                  xs={6}\n                  sm={6}\n                  item\n                  container\n                  className={classes.paddingLeftandBottomOnly}\n                >\n                  <TextField\n                    name=\"NoticePeriod\"\n                    label=\"Notice Period\"\n                    variant=\"outlined\"\n                    helperText={touched.NoticePeriod ? errors.NoticePeriod : \"\"}\n                    error={touched.NoticePeriod && Boolean(errors.NoticePeriod)}\n                    value={NoticePeriod}\n                    onChange={handleChange}\n                    className={classes.textField}\n                    fullWidth\n                    InputProps={{\n                      className: classes.input,\n                    }}\n                    InputLabelProps={{\n                      className: classes.labelstyle,\n                    }}\n                    FormHelperTextProps={{\n                      className: classes.helperText,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid md={12} xs={12} sm={12} container item justify=\"flex-start\">\n              <Box className=\"box1\">\n                <Box\n                  className=\"buttonAnimationcontainedBUtton\"\n                  onMouseEnter={handleMouse}\n                  onMouseLeave={hoverEventLeave}\n                >\n                  <Button\n                    type=\"submit\"\n                    variant=\"text\"\n                    className=\"button\"\n                    style={{ textTransform: \"none\", paddingRight: 7 }}\n                  >\n                    <Typography\n                      className={classes.submitText}\n                      style={{\n                        color: hover ? \"#fff\" : \"\",\n                        fontWeight: \"bold\",\n                        fontFamily: \"Nunito Sans\",\n                      }}\n                    >\n                      Submit\n                    </Typography>\n                  </Button>\n                </Box>\n              </Box>\n            </Grid>\n          </Grid>\n          <Grid md={1} container item />\n        </Grid>\n      </form>\n    </Grid>\n  );\n};\nexport default Form;\n",{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":10,"nodeType":"69","messageId":"70","endLine":1,"endColumn":20},{"ruleId":"67","severity":1,"message":"71","line":2,"column":13,"nodeType":"69","messageId":"70","endLine":2,"endColumn":18},{"ruleId":"67","severity":1,"message":"72","line":3,"column":16,"nodeType":"69","messageId":"70","endLine":3,"endColumn":26},{"ruleId":"67","severity":1,"message":"73","line":3,"column":28,"nodeType":"69","messageId":"70","endLine":3,"endColumn":34},{"ruleId":"67","severity":1,"message":"74","line":3,"column":36,"nodeType":"69","messageId":"70","endLine":3,"endColumn":46},{"ruleId":"67","severity":1,"message":"75","line":4,"column":10,"nodeType":"69","messageId":"70","endLine":4,"endColumn":20},{"ruleId":"67","severity":1,"message":"76","line":5,"column":10,"nodeType":"69","messageId":"70","endLine":5,"endColumn":17},{"ruleId":"67","severity":1,"message":"77","line":57,"column":13,"nodeType":"69","messageId":"70","endLine":57,"endColumn":17},{"ruleId":"67","severity":1,"message":"78","line":57,"column":26,"nodeType":"69","messageId":"70","endLine":57,"endColumn":33},{"ruleId":"67","severity":1,"message":"79","line":57,"column":35,"nodeType":"69","messageId":"70","endLine":57,"endColumn":44},{"ruleId":"67","severity":1,"message":"80","line":57,"column":46,"nodeType":"69","messageId":"70","endLine":57,"endColumn":54},{"ruleId":"67","severity":1,"message":"74","line":8,"column":3,"nodeType":"69","messageId":"70","endLine":8,"endColumn":13},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"no-unused-vars","'takeLatest' is defined but never used.","Identifier","unusedVar","'types' is defined but never used.","'Typography' is defined but never used.","'Drawer' is defined but never used.","'IconButton' is defined but never used.","'withRouter' is defined but never used.","'connect' is defined but never used.","'open' is assigned a value but never used.","'classes' is assigned a value but never used.","'_applyNow' is assigned a value but never used.","'jobTitle' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]